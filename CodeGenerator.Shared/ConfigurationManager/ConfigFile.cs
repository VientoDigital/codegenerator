// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.4.1
// Schema file: Configuration.xsd
// Creation Date: 5/20/2007 11:57:12 AM
//--------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace CodeGenerator.ConfigurationManager
{
    public struct Declarations
    {
        public const string SchemaVersion = "http://icodegenerator.net/Configuration.xsd";
    }

    [XmlRoot(ElementName = "Configuration", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ConfigFile
    {
        [XmlElement(Type = typeof(DataTypes), ElementName = "DataTypes", IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public DataTypesCollection __DataTypesCollection;

        [XmlElement(ElementName = "EndTag", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string", Namespace = Declarations.SchemaVersion)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __EndTag;

        [XmlElement(ElementName = "StartTag", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string", Namespace = Declarations.SchemaVersion)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __StartTag;

        public ConfigFile()
        {
        }

        [XmlIgnore]
        public DataTypesCollection DataTypesCollection
        {
            get
            {
                if (__DataTypesCollection == null) __DataTypesCollection = new DataTypesCollection();
                return __DataTypesCollection;
            }
            set { __DataTypesCollection = value; }
        }

        [XmlIgnore]
        public string EndTag
        {
            get { return __EndTag; }
            set { __EndTag = value; }
        }

        [XmlIgnore]
        public string StartTag
        {
            get { return __StartTag; }
            set { __StartTag = value; }
        }
    }

    [XmlType(TypeName = "DataTypes", Namespace = Declarations.SchemaVersion), Serializable]
    public class DataTypes
    {
        [XmlElement(Type = typeof(SqlType), ElementName = "SqlType", IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public SqlTypeCollection __SqlTypeCollection;

        public DataTypes()
        {
        }

        [XmlIgnore]
        public int Count
        {
            get { return SqlTypeCollection.Count; }
        }

        [XmlIgnore]
        public SqlTypeCollection SqlTypeCollection
        {
            get
            {
                if (__SqlTypeCollection == null) __SqlTypeCollection = new SqlTypeCollection();
                return __SqlTypeCollection;
            }
            set { __SqlTypeCollection = value; }
        }

        [XmlIgnore]
        public SqlType this[int index]
        {
            get { return SqlTypeCollection[index]; }
        }

        public SqlType Add(SqlType obj)
        {
            return SqlTypeCollection.Add(obj);
        }

        public void Clear()
        {
            SqlTypeCollection.Clear();
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return SqlTypeCollection.GetEnumerator();
        }

        public SqlType Remove(int index)
        {
            SqlType obj = SqlTypeCollection[index];
            SqlTypeCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            SqlTypeCollection.Remove(obj);
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class DataTypesCollection : ArrayList
    {
        public new DataTypes this[int index]
        {
            get { return (DataTypes)base[index]; }
            set { base[index] = value; }
        }

        public DataTypes Add(DataTypes obj)
        {
            base.Add(obj);
            return obj;
        }

        public DataTypes Add() => Add(new DataTypes());

        public void Insert(int index, DataTypes obj) => base.Insert(index, obj);

        public void Remove(DataTypes obj) => base.Remove(obj);
    }

    [XmlType(TypeName = "SqlType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SqlType
    {
        [XmlElement(ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string", Namespace = Declarations.SchemaVersion)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __name;

        [XmlElement(ElementName = "value", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string", Namespace = Declarations.SchemaVersion)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __value;

        public SqlType()
        {
        }

        [XmlIgnore]
        public string @value
        {
            get { return __value; }
            set { __value = value; }
        }

        [XmlIgnore]
        public string name
        {
            get { return __name; }
            set { __name = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class SqlTypeCollection : ArrayList
    {
        public new SqlType this[int index]
        {
            get { return (SqlType)base[index]; }
            set { base[index] = value; }
        }

        public SqlType Add(SqlType obj)
        {
            base.Add(obj);
            return obj;
        }

        public SqlType Add() => Add(new SqlType());

        public void Insert(int index, SqlType obj) => base.Insert(index, obj);

        public void Remove(SqlType obj) => base.Remove(obj);
    }
}